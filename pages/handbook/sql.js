import React from 'react'

function sql() {
    return (
        <div>
            <div className="flex-grow bg-gray-100  w-full max-w-7xl mx-auto lg:px-8 lg:flex my-20">
                <div className="flex-1 min-w-0 lg:flex  mx-auto">
                    <div className=" lg:min-w-0 lg:flex-1 border-b border-gray-200">
                        <div className="lg:hidden pb-4">
                        </div>
                        <div className="pl-4 pr-6 pt-4 pb-4 sm:pl-6 lg:pl-8 xl:pl-6 xl:pt-6">
                            <div id="container">
                                <div className="flex">
                                    <h1 className="text-4xl mb-10 font-black">The SQL Handbook</h1>
                                    <img src="/icons/nature/020-cactus.png" className="w-9 ml-2 h-9 bottom-0" />
                                </div>
                                <p className="font-mono text-sm sm:mb-10">Written by <a className="underline" href="https://flaviocopes.com">Kamal Nayan Upadhyay
                                    </a>. Updated October 2022</p>
                                <p className="font-mono text-sm mb-10 sm:hidden"><a className="underline" href="/download/sql/">Download</a></p>
                                <div id="content">
                                    <ul>
                                        <li><a href="#1-information-systems-data-and-information">1. Information systems, data and information</a></li>
                                        <li><a href="#2-what-is-a-database-and-a-dbms">2. What is a Database? And a DBMS?</a></li>
                                        <li><a href="#3-do-you-always-need-a-database">3. Do you always need a database?</a></li>
                                        <li><a href="#4-relational-databases">4. Relational Databases</a></li>
                                        <li><a href="#5-introduction-to-sql">5. Introduction to SQL</a></li>
                                        <li><a href="#6-creating-a-table">6. Creating a table</a></li>
                                        <li><a href="#7-inserting-data-into-a-table">7. Inserting data into a table</a></li>
                                        <li><a href="#8-querying-data">8. Querying data</a></li>
                                        <li><a href="#9-handling-empty-cell">9. Handling empty cell</a></li>
                                        <li><a href="#10-unique-and-primary-keys">10. Unique and Primary keys</a></li>
                                        <li><a href="#11-update-data-in-a-table">11. Update data in a table</a></li>
                                        <li><a href="#12-update-a-table-structure">12. Update a table structure</a></li>
                                        <li><a href="#13-deleting-data-and-tables">13. Deleting data and tables</a></li>
                                        <li><a href="#14-joins">14. Joins</a></li>
                                        <li><a href="#15-removing-duplicates-using-distinct">15. Removing duplicates using DISTINCT</a></li>
                                        <li><a href="#16-using-wildcards-with-like">16. Using wildcards with LIKE</a></li>
                                        <li><a href="#17-indexes">17. Indexes</a></li>
                                        <li><a href="#18-aggregating-data">18. Aggregating data</a></li>
                                        <li><a href="#19-grouping-data">19. Grouping data</a></li>
                                        <li><a href="#20-limit-and-offset">20. Limit and offset</a></li>
                                        <li><a href="#21-comments">21. Comments</a></li>
                                    </ul>
                                    <p>The goal of this handbook is to get you up and running with SQL, starting from zero knowledge.</p>
                                    <p>You will learn the terms and the main ideas, what is a DBMS, how to structure a database, how to insert data into it, how to query the database.</p>
                                    <p>I will only teach you the basics, and once you’re done with this you’ll have the knowledge you need to dive deeper.</p>
                                    <p>I called this “SQL Handbook” but I assume zero database knowledge, so I’m first going to give you an introduction to databases, in particular relational databases.</p>
                                    <h2 id="1-information-systems-data-and-information">1. Information systems, data and information</h2>
                                    <p>The modern world is completely centered around <strong>information</strong> and <strong>data.</strong></p>
                                    <p>What’s the difference between information and data?</p>
                                    <p><strong>Data</strong> is a singular unit of knowledge. It has no intrinsic value on its own. We can’t extract meaning out of it, without knowing more about it.</p>
                                    <p><strong>Information</strong> is something that we can link to data, to be able to attach a meaning to it.</p>
                                    <p>Let me make an example. The number 36 is <em>data</em>. Knowing that 36 is the age of Joe is <em>information</em>.</p>
                                    <p>Information that the data represents the age is essential knowledge that is key in an information system.</p>
                                    <h2 id="2-what-is-a-database-and-a-dbms">2. What is a Database? And a DBMS?</h2>
                                    <p>A <strong>database</strong> is a collection of <strong>information</strong> carefully organized into a system.</p>
                                    <p>The technology that in a computer system lets us organize data and represent the information that’s essential for an information system is called <strong>DataBase Management System</strong> (<strong>DBMS</strong>).</p>
                                    <p>A DBMS is a software that encapsulates the data of a database, and provides us a way to store it, retrieve it, edit it, persist it, and much more.</p>
                                    <p>We ask a DBMS to be efficient, to privately and securely store data, to handle large amounts of data.</p>
                                    <h2 id="3-do-you-always-need-a-database">3. Do you always need a database?</h2>
                                    <p>Do you always need a database for your app? Of course not.</p>
                                    <p>Many times you don’t even need to store data.</p>
                                    <p>But if you need to store data, you have various solutions.</p>
                                    <p>As with everything in technology, nothing is ideal in every situation.</p>
                                    <p>Computers offer many various ways to store data. The most obvious alternative is <strong>files</strong>.</p>
                                    <p>A common example is a website. Some websites use a database to store data (like WordPress), some do not.</p>
                                    <p>Not using a database in that case means a simpler deploy to a hosting service, since you won’t need to use and maintain a database in the first place.</p>
                                    <p>But when handling lots of data, a database is definitely a great way to simplify your life in the long term.</p>
                                    <p>As always, it’s all a balance of complexity vs convenience.</p>
                                    <h2 id="4-relational-databases">4. Relational Databases</h2>
                                    <p>We have many different kinds of DBMS.</p>
                                    <p>Computer professionals experimented with many different options in the past, and one of these options got very popular: the <strong>Relational</strong> **Database Management System (**RDBMS).</p>
                                    <p>For simplicity we generally call them <strong>relational databases</strong>.</p>
                                    <p>You might have heard of PostgreSQL, MySQL, Oracle, SQLite, MariaDB, SQL Server.</p>
                                    <p>Those are all relational databases.</p>
                                    <p>Note the “SQL” in their name. They are also called SQL databases, to contrast NoSQL databases (like MongoDB or DynamoDB for example), which are DBMS that do not use this relational model and do not use SQL as their <em>language</em>.</p>
                                    <p>Relational databases under the hood organize data using two simple concepts: <strong>tables</strong> and <strong>relations</strong>.</p>
                                    <p>This makes them very intuitive to use, because we are used to using tables to organize things. Think about an Excel or Google Sheets, for example.</p>
                                    <p>A relational database, at a first glance, is similar.</p>
                                    <p>Data is stored in one or more tables.</p>
                                    <p>A <strong>table</strong> is a collection of items organized in rows and columns:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| Name{"   "}| Age |{"\n"}| ------ | --- |{"\n"}| Tony{"   "}| 36{"  "}|{"\n"}| Rose{"   "}| 28{"  "}|{"\n"}| Juliet | 16{"  "}|{"\n"}</code></pre></div><p>Each table contains one or more <strong>columns</strong>, that hold data of a specific <strong>type</strong>, like strings, numbers and so on.</p>
                                    <p>The set of a table and all the rules about its columns, like the type of data stored, is called <strong>schema</strong>.</p>
                                    <p>Each table can define <strong>constrains</strong> upon the data that each row can contain. For example, in the simplest case we can say that the value of a column cannot be empty.</p>
                                    <p>Tables can reference each other, forming relationships.</p>
                                    <p>For example we can say the row of the <code>car</code> table with <code>id</code> <code>1</code> is owned by the user assigned to <code>id</code> <code>2</code> in the table <code>users</code>.</p>
                                    <p>In this way we can link data together and build more complex applications.</p>
                                    <p>Relational databases offer us, users, the ability to interact with them through the <strong>SQL language.</strong></p>
                                    <p>It looks like this:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> cars{"\n"}{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> cars <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token string">'Lamborghini'</span><span className="token punctuation">,</span> <span className="token number">2010</span><span className="token punctuation">)</span>{"\n"}</code></pre></div><p>We use this language to define the tables <strong>schema</strong>, fill tables with data, and finally query the data when needed.</p>
                                    <p>The rest of this handbook will be focused on SQL.</p>
                                    <p>SQL is rather old, being born in 1986, and it’s a battle-tested technology used in all sorts of applications.</p>
                                    <h2 id="5-introduction-to-sql">5. Introduction to SQL</h2>
                                    <p>SQL (Structured Query Language) is a language we use to interact with a Database Management System (DBMS) to exchange information with it, in a standardized way.</p>
                                    <p>As the name suggests, it’s not a programming language, but it was born as a querying language, and later evolved to an interface to doing more advanced operations with a database than just performing queries.</p>
                                    <p>I said “evolved”, but in reality SQL is always evolving. It’s a standard that was first published in 1986, then updated in 1989, 1992, 1999, 2003, 2006, 2008, 2011, 2016 and as its latest version, 2019.</p>
                                    <p>SQL is implemented in many popular DBMS: Postgres, MySQL, Oracle, SQLite, MicroSoft SQL Server, and many more.</p>
                                    <p>Each different database implements the standard, or a particular version of it, and adds custom features on top of it, to simplify creating queries or adding a specific functionality.</p>
                                    <p>SQL is a huge subject, and you can literally spend years to master all its features.</p>
                                    <p>In this handbook we’ll only cover the basics to get you up and running.</p>
                                    <p>I recommend you try running the SQL I explain in an online playground experimenting tool like <a href="https://www.db-fiddle.com">DB Fiddle</a> or similar.</p>
                                    <p>A great application to run SQL locally on your own database is <a href="https://tableplus.com/">TablePlus</a>.</p>
                                    <p>As a developer in your applications in your day-to-day you might use a ORM (object relational mapping) library that abstracts SQL and simplifies your life, but it’s absolutely essential to know how things work under the hood, and much of the terminology of ORMs reflect the underlying SQL naming conventions.</p>
                                    <p>Plus, some things are just doable using “plain SQL”.</p>
                                    <p>So, let’s go!</p>
                                    <h2 id="6-creating-a-table">6. Creating a table</h2>
                                    <p>A database is composed by one or more tables.</p>
                                    <p>Creating a table in SQL is done using the <code>CREATE TABLE</code> command.</p>
                                    <p>At creation time you need to specify the table columns names, and the type of data they are going to hold.</p>
                                    <p>SQL defines several kinds of data.</p>
                                    <p>The most important and the ones you’ll see more often are:</p>
                                    <ul>
                                        <li><code>CHAR</code></li>
                                        <li><code>VARCHAR</code></li>
                                        <li><code>DATE</code></li>
                                        <li><code>TIME</code></li>
                                        <li><code>DATETIME</code></li>
                                        <li><code>TIMESTAMP</code></li>
                                    </ul>
                                    <p>Numeric types include:</p>
                                    <ul>
                                        <li><code>SMALLINT</code></li>
                                        <li><code>INTEGER</code></li>
                                        <li><code>DECIMAL</code></li>
                                        <li><code>FLOAT</code></li>
                                    </ul>
                                    <p>Those above all hold numbers. What changes is the size that this number can be.</p>
                                    <p>Consult the manual of your DBMS to see the exact values because this is one of the implementation details that can change.</p>
                                    <p>Also, each DBMS can introduce non-standard types like <code>BIGINT</code> or <code>TINYINT</code> or <code>TEXT</code>, and even advanced ones like JSON or array types.</p>
                                    <p>You can absolutely use those, as long as you know that switching DBMS to a different one, say from PostgreSQL to SQLite, could be problematic if those nonstandard types (and features) are used.</p>
                                    <p>This is the syntax to create a <code>people</code> table with 2 columns, one an integer and the other a variable length string:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><h2 id="7-inserting-data-into-a-table">7. Inserting data into a table</h2>
                                    <p>Once you have a table, you can insert data into it.</p>
                                    <p>Take this table:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>You can now start adding data into it with the <code>INSERT INTO</code> command:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token number">37</span><span className="token punctuation">,</span> <span className="token string">'Joe'</span><span className="token punctuation">)</span>{"\n"}</code></pre></div><p>You can insert multiple items separating each one with a comma:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token number">37</span><span className="token punctuation">,</span> <span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token number">8</span><span className="token punctuation">,</span> <span className="token string">'Ruby'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><h2 id="8-querying-data">8. Querying data</h2>
                                    <p>You can get data out of tables using the <code>SELECT</code> command.</p>
                                    <p>Get all rows and columns:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt"> age | name{"\n"}-----+--------{"\n"}{"  "}37 | Joe{"\n"}{"   "}8 | Ruby{"\n"}</code></pre></div><p>Get only the <code>name</code> column:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> name <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">{"  "}name{"\n"}--------{"\n"} Joe{"\n"} Ruby{"\n"}</code></pre></div><p>Count the items in the table:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token function">COUNT</span><span className="token punctuation">(</span><span className="token operator">*</span><span className="token punctuation">)</span> <span className="token keyword">from</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt"> count{"\n"}-------{"\n"}{"     "}2{"\n"}</code></pre></div><p>You can filter rows in a table adding the <code>WHERE</code> clause:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> age <span className="token keyword">FROM</span> people <span className="token keyword">WHERE</span> name<span className="token operator">=</span><span className="token string">'Joe'</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt"> age{"\n"}-----{"\n"}{"  "}37{"\n"}</code></pre></div><p>The results of a query can be ordered by column value, ascending (the default) or descending, using ORDER BY:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people <span className="token keyword">ORDER</span> <span className="token keyword">BY</span> name<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people <span className="token keyword">ORDER</span> <span className="token keyword">BY</span> name <span className="token keyword">DESC</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><h2 id="9-handling-empty-cell">9. Handling empty cell</h2>
                                    <p>When we create a table in this way:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>SQL freely accepts empty values as records:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token boolean">null</span><span className="token punctuation">,</span> <span className="token boolean">null</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>This might be a problem, because now we have a row with null values:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt"> age | name{"\n"}-----+--------{"\n"}{"  "}37 | Joe{"\n"}{"   "}8 | Ruby{"\n"}{"     "}|{"\n"}</code></pre></div><p>To solve this, we can declare constrains on our table rows. <code>NOT NULL</code> prevents null values:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>If we try to execute this query again:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token boolean">null</span><span className="token punctuation">,</span> <span className="token boolean">null</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>We’d get an error, like this:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql">ERROR:{"  "}<span className="token boolean">null</span> <span className="token keyword">value</span> <span className="token operator">in</span> <span className="token keyword">column</span> <span className="token string">"age"</span> violates <span className="token operator">not</span><span className="token operator">-</span><span className="token boolean">null</span> <span className="token keyword">constraint</span>{"\n"}DETAIL:{"  "}Failing <span className="token keyword">row</span> <span className="token keyword">contains</span> <span className="token punctuation">(</span><span className="token boolean">null</span><span className="token punctuation">,</span> <span className="token boolean">null</span><span className="token punctuation">)</span><span className="token punctuation">.</span>{"\n"}</code></pre></div><blockquote>
                                        <p>Note that an empty string is a valid non-null value.</p>
                                    </blockquote>
                                    <h2 id="10-unique-and-primary-keys">10. Unique and Primary keys</h2>
                                    <p>With a table created with this command:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>We can insert an item more than once.</p>
                                    <p>And in particular, we can have columns that repeat the same value.</p>
                                    <p>We can force a column to have only unique values using the <code>UNIQUE</code> key constraint:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span> <span className="token keyword">UNIQUE</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>Now if you try to add the ‘Joe’ twice:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token number">37</span><span className="token punctuation">,</span> <span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">,</span> <span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>You’d get an error:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql">ERROR:{"  "}<span className="token keyword">duplicate</span> <span className="token keyword">key</span> <span className="token keyword">value</span> violates <span className="token keyword">unique</span> <span className="token keyword">constraint</span> <span className="token string">"people_name_key"</span>{"\n"}DETAIL:{"  "}<span className="token keyword">Key</span> <span className="token punctuation">(</span>name<span className="token punctuation">)</span><span className="token operator">=</span><span className="token punctuation">(</span>Joe<span className="token punctuation">)</span> already <span className="token keyword">exists</span><span className="token punctuation">.</span>{"\n"}</code></pre></div><p>A <strong>primary key</strong> is a unique key that has another property: it’s the primary way we identify a row in the table.</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span> <span className="token keyword">PRIMARY</span> <span className="token keyword">KEY</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>The primary key can be an email in a list of users, for example.</p>
                                    <p>The primary key can be a unique <code>id</code> that we assign to each record automatically.</p>
                                    <p>Whatever that value is, we know we can use it to reference a row in the table.</p>
                                    <h2 id="11-update-data-in-a-table">11. Update data in a table</h2>
                                    <p>The data stored in a table can be updated using the <code>UPDATE</code> command:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">UPDATE</span> people <span className="token keyword">SET</span> age<span className="token operator">=</span><span className="token number">2</span> <span className="token keyword">WHERE</span> name<span className="token operator">=</span><span className="token string">'Ruby'</span>{"\n"}</code></pre></div><p>It’s important to add the <code>WHERE</code> clause, otherwise this instruction:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">UPDATE</span> people <span className="token keyword">SET</span> age<span className="token operator">=</span><span className="token number">2</span>{"\n"}</code></pre></div><p>would update all rows in the table.</p>
                                    <h2 id="12-update-a-table-structure">12. Update a table structure</h2>
                                    <p>We can alter an existing table structure using the <code>ALTER TABLE</code> command, followed by the alteration you want to make:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">ALTER</span> <span className="token keyword">TABLE</span> people <span className="token keyword">ADD</span> <span className="token keyword">COLUMN</span> born_year <span className="token keyword">INT</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>This will add a new column with empty values:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt"> age |{"  "}name{"  "}| born_year{"\n"}-----+--------+-----------{"\n"}{"  "}37 | Joe{"    "}|{"\n"}{"   "}8 | Ruby{"   "}|{"\n"}</code></pre></div><p>To drop a column:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">ALTER</span> <span className="token keyword">TABLE</span> people <span className="token keyword">DROP</span> <span className="token keyword">COLUMN</span> born_year<span className="token punctuation">;</span>{"\n"}</code></pre></div><p>This will result in:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt"> age |{"  "}name{"\n"}-----+--------{"\n"}{"  "}37 | Joe{"\n"}{"   "}8 | Ruby{"\n"}</code></pre></div><h2 id="13-deleting-data-and-tables">13. Deleting data and tables</h2>
                                    <p>To remove data from a table, use the <code>DELETE FROM</code> command.</p>
                                    <p>This deletes all rows:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">DELETE</span> <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><p>You can use the <code>WHERE</code> clause to only remove specific rows:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">DELETE</span> <span className="token keyword">FROM</span> people <span className="token keyword">WHERE</span> name<span className="token operator">=</span><span className="token string">'Joe'</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>To delete a table instead of the data inside the table, use the <code>DROP TABLE</code> command:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">DROP</span> <span className="token keyword">TABLE</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><h2 id="14-joins">14. Joins</h2>
                                    <p>Joins are a very powerful tool to merge data contained into 2 different tables.</p>
                                    <p>Suppose you have 2 tables, <code>people</code> and <code>cars</code>:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}age <span className="token keyword">INT</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span><span className="token punctuation">,</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span> <span className="token keyword">PRIMARY</span> <span className="token keyword">KEY</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> cars <span className="token punctuation">(</span>{"\n"}{"  "}brand <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span><span className="token punctuation">,</span>{"\n"}{"  "}model <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span><span className="token punctuation">,</span>{"\n"}{"  "}owner <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span> <span className="token operator">NOT</span> <span className="token boolean">NULL</span> <span className="token keyword">PRIMARY</span> <span className="token keyword">KEY</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>We add some data:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token number">37</span><span className="token punctuation">,</span> <span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token number">8</span><span className="token punctuation">,</span> <span className="token string">'Ruby'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> cars <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token string">'Ford'</span><span className="token punctuation">,</span> <span className="token string">'Bronco'</span><span className="token punctuation">,</span> <span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> cars <span className="token keyword">VALUES</span> <span className="token punctuation">(</span><span className="token string">'Ford'</span><span className="token punctuation">,</span> <span className="token string">'Mustang'</span><span className="token punctuation">,</span> <span className="token string">'Ruby'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>Now say that we want to correlate the two tables, because the police stopped Ruby driving, looks young, and want to know his age from their database.</p>
                                    <p>We can create a <strong>join</strong> with this syntax:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> age <span className="token keyword">FROM</span> people <span className="token keyword">JOIN</span> cars {"\n"}<span className="token keyword">ON</span> people<span className="token punctuation">.</span>name <span className="token operator">=</span> cars<span className="token punctuation">.</span>owner {"\n"}<span className="token keyword">WHERE</span> cars<span className="token punctuation">.</span>model <span className="token operator">=</span> <span className="token string">'Mustang'</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>We’ll get this result back:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt"> age{"\n"}-----{"\n"}{"   "}8{"\n"}</code></pre></div><p>What is happening? We are joining the two tables cars on two specific columns: <code>name</code> from the <code>people</code> table, and <code>owner</code> from the <code>cars</code> table.</p>
                                    <p>Joins are a topic that can grow in complexity because there are many different kind of joins that you can use to do fancier things with multiple tables.</p>
                                    <h2 id="15-removing-duplicates-using-distinct">15. Removing duplicates using DISTINCT</h2>
                                    <p>Sometimes you want to filter duplicate values in a table.</p>
                                    <p>For example say you have the following schema:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>and we add entries to this table.</p>
                                    <p>We have lots of “Joe”, apparently:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Anna'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Roxanne'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Paul'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>If we run the query</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><p>we get all the duplicates:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| name{"                 "}|{"\n"}| -------------------- |{"\n"}| Joe{"                  "}|{"\n"}| Anna{"                 "}|{"\n"}| Roxanne{"              "}|{"\n"}| Paul{"                 "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}| Joe{"                  "}|{"\n"}</code></pre></div><p>Adding the <code>DISTINCT</code> keyword filters out the duplicates:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token keyword">DISTINCT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| name{"                 "}|{"\n"}| -------------------- |{"\n"}| Joe{"                  "}|{"\n"}| Anna{"                 "}|{"\n"}| Roxanne{"              "}|{"\n"}| Paul{"                 "}|{"\n"}</code></pre></div><h2 id="16-using-wildcards-with-like">16. Using wildcards with LIKE</h2>
                                    <p>Using <code>LIKE</code> you can select rows from a table using wildcards.</p>
                                    <p>For example you have this schema and this data:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'John'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Johanna'</span><span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token punctuation">(</span><span className="token string">'Zoe'</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>This query will return the first 3 rows, as they all start with “Jo”:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people <span className="token keyword">WHERE</span> name <span className="token operator">LIKE</span> <span className="token string">'Jo%'</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>Looking for rows like <code>Joh%</code> will only select John and Johanna:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people <span className="token keyword">WHERE</span> name <span className="token operator">LIKE</span> <span className="token string">'Joh%'</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>Notice I used the <code>%</code> sign to match multiple characters.</p>
                                    <p>You can also use <code>_</code> to match one character, so you can pick Joe and Zoe using:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people <span className="token keyword">WHERE</span> name <span className="token operator">LIKE</span> <span className="token string">'_oe'</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><h2 id="17-indexes">17. Indexes</h2>
                                    <p>When the data in a database table becomes a lot the database could start becoming slow in doing some operations.</p>
                                    <p>To prevent this you can add indexes.</p>
                                    <p>When you try to look for specific information in book, you look at the index and jump to the page it tells you.</p>
                                    <p>That’s pretty similar to what indexes do in databases. It’s a way to tell the database what to optimize for when looking for data.</p>
                                    <p>Indexes start to become a rather advanced topic especially when relations between tables get complex.</p>
                                    <p>To put things simply, which indexes to add does not depend on the schema, but rather on the queries you do.</p>
                                    <p>For example if you have a <code>users</code> table with a <code>name</code> field, and you frequently get that value in a SELECT, then <code>name</code> should be an index.</p>
                                    <p>You create an index using this syntax:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">INDEX</span> index_name <span className="token keyword">ON</span> users <span className="token punctuation">(</span>name<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>The same goes for rows using in WHERE clauses on big tables.</p>
                                    <p>Indexes can improve performance, at a cost however: they make selection faster, but slow down insertions and updates.</p>
                                    <p>Also, they increase disk space usage.</p>
                                    <p>As with everything, it’s a tradeoff and the performance benefits must be carefully measured.</p>
                                    <p>The good thing is you can add and remove indexes when you run into performance issues, so it’s not something you have to optimize for in the beginning.</p>
                                    <h2 id="18-aggregating-data">18. Aggregating data</h2>
                                    <p>You can ask the database to perform a few operations on the data stored in a table.</p>
                                    <p>For example doing a sum of the values of a numeric field.</p>
                                    <p>Or calculating the average.</p>
                                    <p>For example let’s take this database schema and sample data:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span><span className="token punctuation">,</span>{"\n"}{"  "}age <span className="token keyword">INT</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">,</span> <span className="token number">20</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'John'</span><span className="token punctuation">,</span> <span className="token number">30</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Johanna'</span><span className="token punctuation">,</span> <span className="token number">25</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Zoe'</span><span className="token punctuation">,</span> <span className="token number">23</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p><code>AVG()</code> calculates the average.</p>
                                    <p>If you want to get the average age of those people, you can do this:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token function">AVG</span><span className="token punctuation">(</span>age<span className="token punctuation">)</span> <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><p>And here’s the result:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| avg{"  "}|{"\n"}| ---- |{"\n"}| 24.5 |{"\n"}</code></pre></div><p>You typically alias the result of the function to a name of your choosing:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token function">AVG</span><span className="token punctuation">(</span>age<span className="token punctuation">)</span> <span className="token keyword">as</span> average <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| average |{"\n"}| ------- |{"\n"}| 24.5{"    "}|{"\n"}</code></pre></div><p>In the same vein, <code>SUM()</code> calculates the sum.</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token function">SUM</span><span className="token punctuation">(</span>age<span className="token punctuation">)</span> <span className="token keyword">as</span> total <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| total |{"\n"}| ----- |{"\n"}| 98{"    "}|{"\n"}</code></pre></div><p>Use <code>MAX()</code> or <code>MIN()</code> to get the maxiumum or minumum value:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token function">MAX</span><span className="token punctuation">(</span>age<span className="token punctuation">)</span><span className="token punctuation">,</span> <span className="token function">MIN</span><span className="token punctuation">(</span>age<span className="token punctuation">)</span> <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| max | min |{"\n"}| --- | --- |{"\n"}| 30{"  "}| 20{"  "}|{"\n"}</code></pre></div><h2 id="19-grouping-data">19. Grouping data</h2>
                                    <p>You can group data using the <code>GROUP BY</code> clause:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">&lt;</span><span className="token punctuation">.</span><span className="token punctuation">.</span><span className="token punctuation">.</span><span className="token operator">&gt;</span> <span className="token keyword">FROM</span> people <span className="token keyword">GROUP</span> <span className="token keyword">BY</span> department<span className="token punctuation">;</span>{"\n"}</code></pre></div><p>For example let’s take this database schema and sample data:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">CREATE</span> <span className="token keyword">TABLE</span> people <span className="token punctuation">(</span>{"\n"}{"  "}name <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span><span className="token punctuation">,</span>{"\n"}{"  "}department <span className="token keyword">VARCHAR</span><span className="token punctuation">(</span><span className="token number">20</span><span className="token punctuation">)</span><span className="token punctuation">,</span>{"\n"}{"  "}age <span className="token keyword">INT</span>{"\n"}<span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}{"\n"}<span className="token keyword">INSERT</span> <span className="token keyword">INTO</span> people <span className="token keyword">VALUES</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Joe'</span><span className="token punctuation">,</span> <span className="token string">'Sales'</span><span className="token punctuation">,</span> <span className="token number">20</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'John'</span><span className="token punctuation">,</span> <span className="token string">'Sales'</span><span className="token punctuation">,</span> <span className="token number">30</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Johanna'</span><span className="token punctuation">,</span> <span className="token string">'IT'</span><span className="token punctuation">,</span> <span className="token number">25</span><span className="token punctuation">)</span><span className="token punctuation">,</span> {"\n"}<span className="token punctuation">(</span><span className="token string">'Zoe'</span><span className="token punctuation">,</span> <span className="token string">'IT'</span><span className="token punctuation">,</span> <span className="token number">23</span><span className="token punctuation">)</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>We want to get the average age of each department.</p>
                                    <p>Here’s how we can do that:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> department<span className="token punctuation">,</span> <span className="token function">AVG</span><span className="token punctuation">(</span>age<span className="token punctuation">)</span> <span className="token keyword">as</span> total <span className="token keyword">FROM</span> people <span className="token keyword">GROUP</span> <span className="token keyword">BY</span> department<span className="token punctuation">;</span>{"\n"}</code></pre></div><p>And here’s the result:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-txt"><code className="language-txt" data-lang="txt">| department | total{"  "}|{"\n"}| ---------- | ------ |{"\n"}| Sales{"      "}| 25{"     "}|{"\n"}| IT{"         "}| 24{"     "}|{"\n"}</code></pre></div><h2 id="20-limit-and-offset">20. Limit and offset</h2>
                                    <p>You can limit the number of rows retrieved. This is not a standard SQL and each database does this differently. MySQL and PostgreSQL use <code>LIMIT</code>:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people <span className="token keyword">ORDER</span> <span className="token keyword">BY</span> name <span className="token keyword">LIMIT</span> <span className="token number">10</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><p>and you can set an offset to return, in this case, the rows from 11 to 20:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people <span className="token keyword">ORDER</span> <span className="token keyword">BY</span> name <span className="token keyword">LIMIT</span> <span className="token number">10</span> <span className="token keyword">OFFSET</span> <span className="token number">10</span><span className="token punctuation">;</span>{"\n"}</code></pre></div><h2 id="21-comments">21. Comments</h2>
                                    <p>You can add comments to SQL queries using two hyphens at the beginning of a line:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token comment">-- just a test</span>{"\n"}<span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><p>Or use <code>/* */</code> to comment a portion of SQL inside a line, or to add multiple lines comments:</p>
                                    <div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> <span className="token comment">/* test */</span> people<span className="token punctuation">;</span>{"\n"}</code></pre></div><div className="highlight"><pre tabIndex={0} style={{ color: '#f8f8f2', backgroundColor: '#272822', MozTabSize: 4, OTabSize: 4, tabSize: 4 }} className="language-sql"><code className="language-sql" data-lang="sql"><span className="token keyword">SELECT</span> <span className="token operator">*</span> <span className="token keyword">FROM</span> <span className="token comment">/* {"\n"}this is just a test */</span> {"\n"}people<span className="token punctuation">;</span>{"\n"}</code></pre></div>
                                </div>
                                <div className="hidden xl:block text-center mt-20">
                                    <a href="#" className="underline">Back to top</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default sql