// <!-- <div className=''>
//               {Object.keys(getAnswer).map((item) => {
//                 return (
//                   <div className=' flex flex-wrap -m-4' key={getAnswer[item]._id} >
//                     {/* {console.log(getAnswer[item])} */}
//                     {
//                       getAnswer[item].filter((obj) => obj.title.toLowerCase().includes(searchkey)).map((item) => {
//                         return (
//                           <div className="xl:w-1/4 md:w-1/2 p-10 py-3 md:p-4  " key={item._id} >
//                             <Link href={`/answers/${item._id}`}> <div className="bg-gray-200 p-6 rounded-2xl  hover:shadow-lg hover:shadow-[#6366F1] hover:ring-offset-1 hover:ring-1  " style={{ backgroundColor: mode === 'dark' ? 'rgb(31 41 55)' : '', color: mode === 'dark' ? 'white' : '' }} >
//                               <img className="h-40 rounded-lg w-full   mb-6" src={item.imageUrl} alt="content" />
//                               <h3 className="tracking-widest text-[#6366F1] text-xs font-medium title-font">FREE COURCE</h3>
//                               <h2 style={{ color: mode === 'dark' ? 'white' : '' }} className="text-lg text-gray-900 font-medium title-font mb-4">{item.title}</h2>
//                               <p className="leading-relaxed text-base text-justify" >{item.description.replace(/<[^>]+>/g, '').substr(0, 100)}</p>
//                             </div></Link>
//                           </div>
//                         )
//                       })
//               }
//                   </div>

//                 )
//               })}
//             </div>



//   const [data, setData] = useState(getAnswer);

//   // exclude column list from filter
//   const excludeColumns = ["id", "color"];

//   // handle change event of search input
//   const handleChange = value => {
//     setSearchkey(value);
//     filterData(value);
//   };

//   // filter records by search text
//   const filterData = (value) => {
//     const lowercasedValue = value.toLowerCase().trim();
//     if (lowercasedValue === "") setData(dataList);
//     else {
//       const filteredData = getAnswer.filter(item => {
//         // return Object.keys(item).some(key =>
//         //   excludeColumns.includes(key) ? false : item[key].toString().toLowerCase().includes(lowercasedValue)
//                 return Object.keys(item).filter((obj) => obj.title.toLowerCase().includes(searchkey))

//         // );
//       });
//       setData(filteredData);
//     }
//   } -->







// //   // Next.js API route support: https://nextjs.org/docs/api-routes/introduction
// // import connectDb from "../../database/db";
// // import Users from "../../model/User";
// // import Answer from "../../model/Answer"
// // connectDb()

// // export default async function handler(req, res) {

// //   // Users.find({}).populate("address").exec((err, result) => {
// //   //   if(err){
// //   //       return  res.json({error :  err})
// //   //   }
// //   //   res.json({result :  result})
// //   //   });

// //   try {
// //     const user = await Users.find({}).populate("address")

// //     res.status(200).json({ user })
// //     console.log(user)
// //   } catch (error) {
// //     res.status(200).json({ error })
// //   }
// // }
